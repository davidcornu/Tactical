// Generated by CoffeeScript 1.3.3
(function() {

  Tactical.Polygon = (function() {

    function Polygon() {
      this.vertices = [];
    }

    Polygon.prototype.matchVertices = function(a, b) {
      var reverse, standard;
      standard = _([a[0][0] === b[0][0], a[0][1] === b[0][1], a[1][0] === b[1][0], a[1][1] === b[1][1]]).all(_.identity);
      reverse = _([a[1][0] === b[0][0], a[1][1] === b[0][1], a[0][0] === b[1][0], a[0][1] === b[1][1]]).all(_.identity);
      return standard || reverse;
    };

    Polygon.prototype.hasVertex = function(b) {
      var a, _i, _len, _ref;
      _ref = this.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        if (this.matchVertices(a, b)) {
          return true;
        }
      }
      return false;
    };

    Polygon.prototype.removeVertex = function(b) {
      var index,
        _this = this;
      index = (function() {
        var a, i, _i, _len, _ref;
        _ref = _this.vertices;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          a = _ref[i];
          if (_this.matchVertices(a, b)) {
            return i;
          }
        }
        return null;
      })();
      if (index) {
        return this.vertices.splice(index, 1);
      }
    };

    Polygon.prototype.merge = function(polygon) {
      var vertex, _i, _len, _ref;
      _ref = polygon.vertices;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vertex = _ref[_i];
        if (this.hasVertex(vertex)) {
          this.removeVertex(vertex);
        } else {
          this.vertices.push(vertex);
        }
      }
      return this.vertices;
    };

    return Polygon;

  })();

}).call(this);
